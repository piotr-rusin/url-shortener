# -*- coding: utf-8 -*-
import datetime

from flask import redirect, url_for, flash, render_template, Markup
from flask.views import View
from injector import inject

from . import app
from .forms import url_form_class
from .models import AliasValueError, commit_changes, target_url_class

from .validation import BlacklistValidator


@app.context_processor
def inject_year():
    now = datetime.datetime.now()
    return dict(year=now.year)


@inject
@app.route('/', methods=['GET', 'POST'])
def shorten_url(
    target_url_class: target_url_class,
    form_class: url_form_class
):
    """Display form and handle request for URL shortening

    If short URL is successfully created or found for the
    given URL, its alias property is saved in session, and
    the function redirects to its route. After redirection,
    the alias is used to query for newly created shortened
    URL, and information about it is presented.

    If there are any errors for data entered by the user into
    the input text field, they are displayed.

    :returns: a response generated by rendering the template,
    either directly or after redirection.
    """
    form = form_class()
    if form.validate_on_submit():
        target_url = target_url_class.get_or_create(form.url.data)
        commit_changes()
        msg_tpl = Markup(
            'New short URL: <a href="{0}">{0}</a><br>Preview'
            ' available at: <a href="{1}">{1}</a>'
        )
        msg = msg_tpl.format(target_url.short_url, target_url.preview_url)
        flash(msg, 'success')

        return redirect(url_for(shorten_url.__name__))
    else:
        for field_errors in form.errors.values():
            for error in field_errors:
                flash(error, 'error')
    return render_template('shorten_url.html', form=form)


def render_preview(target_url, warning_message=None):
    return render_template(
        'preview.html',
        target_url=target_url,
        warning=warning_message
    )


def get_response(alias, alternative_action, target_url_class, url_validator):
    """ Gets an appropriate response for given alias

    If the alias refers to a URL that is recognized as spam or
    containing a blacklisted domain, a preview with information
    on the result of the validation is shown. Otherwise, the function
    returns a result of alternative_action for given alias

    :param alias: a string representing an existing target URL
    :param alternative_action: a function receiving
    target URL object as its argument, used for generating
    a response for request for a safe URL
    :returns: a response generated from rendering preview or
    calling alternative_action
    :raises werkzeug.exceptions.HTTPException: when there is no
    target URL for given alias
    """
    target_url = target_url_class.query.get_or_404(alias)
    msg = url_validator.get_msg_if_blacklisted(str(target_url))
    if msg is not None:
        return render_preview(target_url, msg)
    return alternative_action(target_url)


class ShowURL(View):
    """A class of views presenting existing target URLs

    The target URLs can be presented either by redirecting to them or
    by showing a preview page containing the target URL and a short URL
    redirecting to it and provided by the application.
    """

    @inject
    def __init__(
        self,
        preview,
        target_url_class: target_url_class,
        blacklist_validator: BlacklistValidator
    ):
        """ Initialize a new instance

        :param preview: if True, the response returned by the view will
        always be a preview of target URL with given alias. If False,
        it will be a redirect to the target URL, unless blacklist
        validator recognizes URL as spam, in which case it will be
        the preview.
        :param target_url_class: an instance of target_url_class used
        to look up the URL
        :param blacklist_validator: an instance of BlacklistValidator
        used to test if the URL is recognized as spam
        """

        self.preview = preview
        self.target_url_class = target_url_class
        self.blacklist_validator = blacklist_validator

    def dispatch_request(self, alias):
        """Show URL either as a redirection to target or as a preview
        of target URL

        :param alias: a string value by which we search for
        an associated URL. If it is not found, a 404 error occurs.
        :returns: a response depending on results of blacklist lookup
        and initial configuration of the view
        :raises werkzeug.exception.HTTPException with code 404, if
        it is raised by the target URL search call
        """
        target_url = self.target_url_class.query.get_or_404(alias)
        spam_msg = self.blacklist_validator.get_msg_if_blacklisted(
            str(target_url)
        )

        if spam_msg or self.preview:
            return render_template(
                'preview.html',
                target_url=target_url,
                warning=spam_msg
            )
        return redirect(target_url)


app.add_url_rule(
    '/<alias>',
    view_func=ShowURL.as_view('redirect_for', preview=False)
)

app.add_url_rule(
    '/preview/<alias>',
    view_func=ShowURL.as_view('preview', preview=True)
)


@app.errorhandler(AliasValueError)
@app.errorhandler(404)
def not_found(error):
    return render_template('not_found.html')


@app.errorhandler(500)
def server_error(error):
    return render_template('server_error.html')
